phi = [
    # SRS-001: Load H/C Unit Definitions
    "G(s001_ctrl_def_units)",
    "G(s001_sys_startup -> X(s001_read_init))",
    "G(s001_read_init & s001_def_in_init -> F(s001_def_load_ok | s001_init_data_parse_err))",
    "G(!s001_def_load_ok | s001_op_param_has_hc_def)",
    "F(s001_def_load_ok) | G(s001_sys_no_hc_ctrl)",
    "G(s001_init_data_in -> (X(s001_use_init_for_hc_id) | X(s001_init_data_invalid)))",
    "G(!(s001_def_derived & s001_hc_cfg_struct_ok) | s001_hc_cfg_consistent)",
    "G(s001_op_param_out -> F(s001_downstream_use_op_param))",
    "G(s001_init_file_access_err -> F(s001_log_init_err & s001_notify_admin_init_err))",
    "X(s001_read_init) | G(!s001_sys_active)",
    "G(s001_def_load_ok U s001_sys_fully_init)",
    "(!s001_init_data_in | F(s001_def_load_ok | s001_init_fail_persist))",
    "G(s001_init_data_parse_err -> (!F(s001_ctrl_def_units) & F(s001_sys_fault)))",
    "G(!s001_hc_cfg_consistent | s001_ctrl_def_units)",
    "G(s001_read_init -> (s001_def_in_init -> F(s001_def_derived)))",
    "F(s001_op_param_out & s001_op_param_has_hc_def)",
    "G(!(s001_read_init & !s001_def_in_init) | F(s001_default_hc_cfg_used | s001_err_no_hc_cfg))",
    "G(s001_sys_recover_init_err -> F(s001_read_init_again))",
    "G(s001_def_load_ok -> X(s001_hc_unit_stat_queryable))",
    "G(s001_op_param_has_hc_def -> (s011_use_def | s007_use_def))",
    "G(s001_def_in_init)",
    "G(s001_init_data_in -> X F(s001_def_derived))",
    "G(!s001_def_derived | s001_use_init_for_hc_id)",
    "G(s001_use_init_for_hc_id -> F(s001_op_param_out))",
    "X(s001_init_data_valid) | F(s001_init_data_parse_err)",
    "G(s001_op_param_out -> G(s001_sys_op_w_loaded_hc | s001_hc_disabled))",
    "F(s001_init_file_access_err) -> G(!s001_ctrl_def_units)",
    "G(!s001_init_file_access_err | F(s001_retry_init_access | s001_manual_hc_cfg_prompt))",
    "G(s001_def_load_ok & s001_hc_cfg_struct_ok)",
    "G(s001_def_derived U s001_op_param_out)",
    "G(s001_ctrl_def_units & s001_def_in_init & s001_read_init & s001_def_derived)",
    "G(s001_init_data_parse_err -> F(s001_sys_report_cfg_err))",
    "G(!s001_op_param_has_hc_def | s001_ctrl_def_units)",
    "F(s001_hc_cfg_struct_ok) | G(s001_hc_cfg_valid_pending)",
    "G(s001_read_init -> (X(s001_def_load_ok) | X(s001_init_data_parse_err | s001_init_file_access_err)))",
    "G(s001_init_data_in & !s001_init_data_valid -> F(s001_reject_init_data & s001_req_valid_data))",
    "G(s001_op_param_out & !s001_op_param_has_hc_def -> F(s001_op_param_incomplete_err))",
    "G(s001_hc_cfg_consistent)",
    "G(!s001_hc_cfg_consistent -> F(s001_hc_reconfig_req | s001_hc_sys_disabled))",
    "G(s001_init_data_valid -> (!s001_read_init | F(s001_init_file_read_err_unexpected)))",
    "G(s001_use_init_for_hc_id -> (s001_hc_thermo_map_created | s001_hc_floor_map_created))",
    "F(s001_all_def_hc_units_ctrlable)",
    "G((s001_def_load_ok & s001_op_param_out) -> X(s007_sys_init_can_proceed))",
    "G(s001_init_file_read_err -> !F(s001_def_load_ok))",
    "G(!s001_init_file_read_err | X(s001_init_data_proc_starts))",
    "G(s001_def_in_init & s001_sys_startup -> F(s001_def_load_ok | s001_init_proc_failed))",
    "G(s001_op_param_has_hc_def -> (s001_hc_units_list_avail | s001_hc_units_prop_avail))",
    "G(s001_init_data_in -> F(s001_init_data_logged))",
    "G(s001_def_load_ok -> G(s001_sys_knows_hc_unit_count))",
    "G(s001_read_init & s001_init_data_parse_err -> F(s001_admin_alert_parse_err))",
    "G(s001_hc_cfg_consistent -> (s001_all_hc_units_identified & s001_hc_unit_params_loaded))",
    "G(s001_init_file_not_found -> F(s001_log_critical_error & s001_system_halt_request))",
    "G(s001_op_param_out & s001_op_param_has_hc_def -> X (s002_load_thermo_defs_starts | s001_waiting_for_next_init_step))",
    "G(s001_def_load_ok -> (!s001_op_param_has_hc_def -> F(s001_internal_consistency_error)))",
    "F(s001_init_data_schema_version_check_ok | s001_init_data_schema_mismatch_warn)",

    # SRS-002: Load Thermostat Definitions
    "G(s002_thermo_def_in_init)",
    "G(s002_sys_startup & s001_def_load_ok -> X(s002_read_init_for_thermo))",
    "G(s002_read_init_for_thermo & s002_thermo_def_in_init -> F(s002_thermo_def_load_ok | s002_thermo_init_data_parse_err))",
    "G(!s002_thermo_def_load_ok | s002_op_param_has_thermo_def)",
    "F(s002_thermo_def_load_ok) | G(s002_sys_cannot_monitor_temp)",
    "G(s002_init_data_in -> (X(s002_use_init_for_thermo_id) | X(s002_thermo_init_data_invalid)))",
    "G(s002_thermo_id_unique_per_quad_floor)",
    "G(s002_op_param_out_thermo -> F(s002_downstream_use_op_param_thermo))",
    "G(s002_thermo_init_data_parse_err -> F(s002_log_init_err_thermo & s002_notify_admin_init_err_thermo))",
    "X(s002_read_init_for_thermo) | G(!s002_thermo_processing_active)",
    "G(s002_thermo_def_load_ok U s002_thermo_init_complete)",
    "(!s002_init_data_in | F(s002_thermo_def_load_ok | s002_thermo_init_fail_persist))",
    "G(s002_thermo_init_data_parse_err -> (!F(s002_sys_monitor_temp_accurate) & F(s002_sys_fault_thermo)))",
    "G(!s002_thermo_id_unique_per_quad_floor | F(s002_thermo_cfg_inconsistent_err))",
    "G(s002_read_init_for_thermo -> (s002_thermo_def_in_init -> F(s002_thermo_def_derived)))",
    "F(s002_op_param_out_thermo & s002_op_param_has_thermo_def)",
    "G(!(s002_read_init_for_thermo & !s002_thermo_def_in_init) | F(s002_default_thermo_cfg_used | s002_err_no_thermo_cfg))",
    "G(s002_sys_recover_init_err_thermo -> F(s002_read_init_thermo_again))",
    "G(s002_thermo_def_load_ok -> X(s002_thermo_temp_can_be_read))",
    "G(s002_op_param_has_thermo_def -> (s008_validate_temp_uses_defs | s009_determine_temp_status_uses_defs))",
    "G(s002_thermo_def_load_ok -> G(s002_thermo_count_matches_hc_unit_count | s002_thermo_hc_mismatch_warning))",
    "F(s002_thermo_def_load_ok & s002_thermo_id_unique_per_quad_floor)",
    "G(s002_thermo_def_derived U s002_op_param_out_thermo)",
    "G(s002_read_init_for_thermo -> (X(s002_thermo_def_load_ok) | X(s002_thermo_init_data_parse_err | s002_thermo_init_file_access_err)))",
    "G(s002_thermo_def_load_ok & !s002_op_param_has_thermo_def -> F(s002_internal_consistency_error_thermo))",
    "G(s002_init_data_in & !s002_init_data_is_valid_thermo -> F(s002_reject_init_data_thermo & s002_req_valid_data_thermo))",
    "G(s002_thermo_def_load_ok -> s002_thermo_list_available_to_sys)",
    "G(!s002_thermo_list_available_to_sys | F(s008_can_validate_all_thermo_temps))",
    "G(s002_thermo_def_in_init & s001_def_load_ok -> F(s002_thermo_def_load_ok | s002_thermo_init_dependency_fail))",
    "G(s002_op_param_out_thermo & s002_op_param_has_thermo_def -> X (s003_load_util_params_starts | s002_waiting_for_next_init_step))",
    "G(s002_thermo_init_file_access_err -> F(s002_log_critical_error_thermo & s002_system_temp_monitoring_disabled))",
    "G(s002_op_param_has_thermo_def -> s002_thermo_unique_id_enforced)",
    "F(s002_thermo_init_data_schema_version_check_ok | s002_thermo_init_data_schema_mismatch_warn)",
    "G(!s001_def_load_ok -> !F(s002_thermo_def_load_ok))", # Dependency implication
    "G(s001_hc_cfg_consistent & s002_thermo_def_load_ok -> F(s002_thermo_hc_mapping_possible))",
    "G(s002_thermo_def_load_ok -> G(s002_each_thermo_associated_with_hc_unit | s002_thermo_hc_unmapped_exists))",
    "G(s002_thermo_init_data_parse_err -> !s002_thermo_def_load_ok & F(s002_manual_thermo_config_required))",
    "G(s002_all_thermo_defs_loaded_and_valid -> X(s003_init_step_enabled))",
    "G(s002_thermo_def_load_ok & s002_thermo_id_unique_per_quad_floor & s002_op_param_has_thermo_def)", # Combined success state
    "G(s002_read_init_for_thermo U s002_thermo_def_processing_complete)",
    "G(s002_thermo_processing_complete -> (s002_thermo_def_load_ok | s002_thermo_def_load_failed))",
    "G(s002_thermo_def_load_failed -> F(s002_error_report_generated & s002_operator_notified))",
    "G(s002_thermo_id_uniqueness_check_failed -> F(s002_duplicate_thermo_id_error & !s002_thermo_def_load_ok))",
    "G(s002_thermo_def_load_ok -> F(s017_change_thermo_setting_possible_for_all_thermos))",
    "G(s002_thermo_count_known_by_sys)",
    "G(s002_thermo_count_known_by_sys & s001_sys_knows_hc_unit_count -> (s002_thermo_count_equals_hc_count | s002_count_mismatch_logged))",
    "G(s002_op_param_has_thermo_def -> (s004_set_trigger_values_can_use_thermo_defs | s005_set_overtemp_values_can_use_thermo_defs))",
    "G(s002_thermo_def_load_ok -> F(s007_initialize_system_can_check_all_thermostats))",
    "G(s002_thermo_def_load_ok -> (!s008_validate_temp_uses_defs -> F(s002_thermo_data_validation_compromised)))",
    "G(s002_thermo_def_load_ok -> (s009_temp_status_determinable_for_all | F(s009_temp_status_unknown_for_some)))",
    "G(s002_thermo_def_load_ok -> (s010_hc_mode_determinable_for_all | F(s010_hc_mode_undetermined_for_some)))",
    "F(s002_thermo_def_consistency_with_s001_hc_defs_verified)",

    # SRS-003: Load Utilization Parameters
    "G(s003_util_params_in_init)",
    "G(s003_sys_startup & s002_thermo_def_load_ok -> X(s003_read_init_for_util))",
    "G(s003_read_init_for_util & s003_util_params_in_init -> F(s003_util_params_load_ok | s003_util_init_data_parse_err))",
    "G(!s003_util_params_load_ok | s003_util_params_avail_to_sys)",
    "F(s003_util_params_load_ok) | G(s003_sys_uses_default_util_rules | s003_sys_util_mgmt_disabled)",
    "G(s003_init_data_in_util -> (X(s003_max_hc_units_concurrent_set) | X(s003_util_init_data_invalid)))",
    "G(s003_max_hc_units_concurrent_is_positive_num)",
    "G(s003_util_params_out -> F(s003_downstream_use_util_params))",
    "G(s003_util_init_data_parse_err -> F(s003_log_init_err_util & s003_notify_admin_init_err_util))",
    "X(s003_read_init_for_util) | G(!s003_util_param_processing_active)",
    "G(s003_util_params_load_ok U s003_util_init_complete)",
    "(!s003_init_data_in_util | F(s003_util_params_load_ok | s003_util_init_fail_persist))",
    "G(s003_util_init_data_parse_err -> F(s003_sys_fault_util_cfg & !s011_can_limit_concurrent_hc_units))",
    "G(!s003_max_hc_units_concurrent_is_positive_num | F(s003_util_cfg_invalid_err_max_units))",
    "G(s003_read_init_for_util -> (s003_util_params_in_init -> F(s003_max_hc_units_concurrent_loaded)))",
    "F(s003_util_params_out & s003_util_params_avail_to_sys)",
    "G(!(s003_read_init_for_util & !s003_util_params_in_init) | F(s003_default_util_params_used | s003_err_no_util_cfg))",
    "G(s003_sys_recover_init_err_util -> F(s003_read_init_util_again))",
    "G(s003_util_params_load_ok -> X(s011_determine_hc_status_can_use_util_params))",
    "G(s003_util_params_load_ok -> G(s011_concurrent_unit_limit_enforceable))",
    "G(s003_util_params_avail_to_sys -> (s011_status_all_hc_units_checks_utilization | s013_generate_hc_request_considers_utilization))",
    "G(s003_util_params_load_ok -> (s003_max_heating_units_defined & s003_max_cooling_units_defined | s003_combined_max_units_defined))",
    "G(!s002_thermo_def_load_ok -> !F(s003_util_params_load_ok))", # Dependency
    "G(s003_util_params_load_ok & s001_sys_knows_hc_unit_count -> (s003_max_units_leq_total_units | F(s003_util_param_inconsistent_with_hc_count)))",
    "G(s003_util_params_load_ok -> F(s004_set_trigger_values_can_proceed))",
    "G(s003_read_init_for_util U s003_util_param_processing_done)",
    "G(s003_util_param_processing_done -> (s003_util_params_load_ok | s003_util_params_load_failed))",
    "G(s003_util_params_load_failed -> F(s003_system_uses_unrestricted_utilization | s003_hc_unit_activation_disabled))",
    "G(s003_max_hc_units_concurrent_value_unrealistic -> F(s003_warning_unrealistic_util_limit & s003_operator_prompt_for_confirmation))",
    "F(s003_util_init_data_schema_version_check_ok | s003_util_init_data_schema_mismatch_warn)",
    "G(s003_util_params_load_ok -> (s011_queue_hc_requests_if_max_reached | s012_generate_unit_unavailable_if_max_reached))",
    "G(s003_util_params_load_ok -> X(s004_load_trigger_values_starts | s003_waiting_for_next_init_step))",
    "G(s003_util_params_not_loaded -> G(s011_hc_unit_utilization_unmanaged | F(s011_potential_overload_warning)))",
    "G(s003_util_params_in_init_file_is_plaintext_readable | s003_util_params_in_init_file_is_encrypted)",
    "G(s003_util_params_load_ok -> s003_system_knows_max_concurrent_units)",
    "G(s003_system_knows_max_concurrent_units & s011_current_active_units_count_known -> s011_can_decide_new_activation)",
    "F(s003_util_params_are_periodically_reconfigurable_runtime | s003_util_params_are_static_post_init)",
    "G(s003_util_params_load_ok -> s003_util_params_applied_globally | s003_util_params_applied_per_floor_or_area)",
    "G(s003_init_data_in_util -> F(s003_util_params_logged_post_load))",
    "G(s003_util_params_load_ok -> G(!s011_exceeds_max_concurrent_units))",
    "G(s003_util_params_load_ok & s011_request_to_exceed_max_units -> F(s011_request_queued_or_denied))",
    "G(s003_util_params_load_ok -> (s015_alarm_data_not_directly_affected | s016_event_data_records_util_denials))",
    "G(s003_util_params_load_ok -> (s018_reports_can_show_utilization_stats | s018_reports_ignore_utilization_data))",

    # ... (Continue for SRS-004 to SRS-018, generating ~50-60 formulas each)
    # ... Example stubs for further items to show structure and naming ...

    # SRS-004: Set Trigger Values
    "G(s004_trigger_vals_in_init)",
    "G(s003_util_params_load_ok -> X(s004_read_init_for_trigger))",
    "G(s004_read_init_for_trigger & s004_trigger_vals_in_init -> F(s004_trigger_vals_load_ok | s004_trigger_init_parse_err))",
    "G(!s004_trigger_vals_load_ok | s004_trigger_vals_avail_to_sys)",
    "F(s004_trigger_vals_load_ok) | G(s004_sys_uses_default_triggers | s004_hc_activation_logic_flawed)",
    "G(s004_init_data_in_trigger -> (X(s004_trigger_delta_set) | X(s004_trigger_init_data_invalid)))",
    "G(s004_trigger_delta_is_reasonable_value)", # Abstract "reasonable"
    "G(s004_op_param_out_trigger -> F(s009_determine_temp_status_uses_triggers))",
    "G(s004_trigger_vals_load_ok -> (s010_determine_hc_mode_uses_triggers | s004_trigger_val_for_heating_differs_from_cooling))",
    "G(s004_trigger_vals_load_ok -> X(s005_load_overtemp_starts | s004_waiting_for_next_init_step))",
    "G(s004_trigger_vals_load_ok -> G(s004_lower_trigger_lt_set_temp & s004_upper_trigger_gt_set_temp | s004_trigger_logic_error))",
    "G(s004_trigger_vals_load_ok -> F(s004_trigger_values_can_be_adjusted_per_thermostat_group | s004_global_trigger_values_apply))",
    "F(s004_trigger_val_init_schema_ok | s004_trigger_val_schema_mismatch)",
    "G(s004_trigger_vals_load_ok -> (s004_trigger_for_turn_on_defined & s004_trigger_for_turn_off_implied_or_defined))",
    "G(s004_trigger_init_parse_err -> F(s004_log_init_err_trigger & s004_system_uses_failsafe_triggers))",
    "G(!s004_trigger_vals_avail_to_sys -> G(s010_hc_mode_determination_unreliable))",
    "G(s004_trigger_vals_load_ok -> (s009_temp_status_evaluates_trigger_breach | s010_hc_request_based_on_trigger))",
    "G(s004_trigger_vals_load_ok & s009_temp_crosses_lt_or_ut -> F(s010_hc_mode_change_requested))",
    "G(s004_trigger_delta_too_small -> F(s004_warning_frequent_hc_cycling))",
    "G(s004_trigger_delta_too_large -> F(s004_warning_large_temp_swing))",
    "G(s004_trigger_values_set_dynamically_based_on_occupancy | s004_trigger_values_are_static)",
    "G(s004_trigger_vals_load_ok -> F(s017_change_thermo_setting_recalculates_lt_ut))",
    "G(s004_trigger_vals_load_ok -> G(s004_lt_is_tset_minus_td & s004_ut_is_tset_plus_td))",
    "G(s004_trigger_values_sensitive_to_time_of_day | s004_trigger_values_constant_all_day)",
    "G(s004_trigger_vals_load_ok -> s004_user_override_of_triggers_possible_with_auth | s004_triggers_are_fixed_by_admin)",
    "G(s004_trigger_value_units_consistent_with_temp_units)",
    "G(s004_trigger_vals_load_ok -> F(s018_reports_can_analyze_trigger_effectiveness))",
    "G(s004_trigger_val_outside_expected_range -> F(s004_trigger_val_sanity_check_failed_warning))",
    "G(s004_read_init_for_trigger U s004_trigger_val_processing_done)",
    "G(s004_trigger_val_processing_done -> (s004_trigger_vals_load_ok | s004_trigger_vals_load_failed))",
    "G(s004_trigger_vals_load_failed -> F(s004_system_uses_hardcoded_safe_triggers | s004_hc_control_suspended_no_triggers))",
    "F(s004_trigger_values_are_version_controlled_in_init_file)",
    "G(s004_trigger_vals_load_ok -> !F(s009_no_trigger_exceeded_ever_detected & s009_temp_way_off_setpoint))", # Liveness property
    "G(s004_op_param_out_trigger -> s004_trigger_data_accessible_by_control_logic)",
    "G(s004_trigger_vals_load_ok -> (s004_separate_heat_trigger_delta | s004_separate_cool_trigger_delta | s004_same_trigger_delta_for_heat_cool))",
    "G(s004_trigger_vals_load_ok -> F(s004_audit_log_for_trigger_value_changes_exists))",
    "G(s004_trigger_vals_load_ok -> s004_trigger_values_loaded_match_init_file_spec)",
    "G(s004_trigger_vals_load_ok -> (s014_generate_hc_signal_indirectly_affected_by_triggers_via_s010 | s015_generate_alarm_data_not_directly_affected_by_triggers))",
    "G(s004_init_data_in_trigger & s002_thermo_def_load_ok -> F(s004_trigger_vals_can_be_associated_with_thermostats))",
    "G(s004_trigger_vals_load_ok -> (s004_all_thermostats_have_trigger_values | F(s004_missing_trigger_values_for_some_thermostats_error)))",
    "G(s004_trigger_val_less_than_zero -> F(s004_invalid_trigger_delta_error))",
    "G(s004_trigger_val_configurable_per_zone | s004_trigger_val_global_for_all_zones)",

    # SRS-005: Set Overtemp Values
    "G(s005_overtemp_vals_in_init)",
    "G(s004_trigger_vals_load_ok -> X(s005_read_init_for_overtemp))",
    "G(s005_read_init_for_overtemp & s005_overtemp_vals_in_init -> F(s005_overtemp_vals_load_ok | s005_overtemp_init_parse_err))",
    "G(!s005_overtemp_vals_load_ok | s005_overtemp_vals_avail_to_sys)",
    "F(s005_overtemp_vals_load_ok) | G(s005_sys_uses_default_overtemp | s005_overtemp_alarms_disabled)",
    "G(s005_init_data_in_overtemp -> (X(s005_overtemp_delta_set_fahrenheit) | X(s005_overtemp_init_data_invalid)))", # Requirement specified 3 deg F
    "G(s005_overtemp_delta_is_fixed_fahrenheit_value | s005_overtemp_delta_is_configurable_value)", # Document says 3 deg F, but system might allow config
    "G(s005_op_param_out_overtemp -> F(s009_determine_temp_status_uses_overtemp_vals))",
    "G(s005_overtemp_vals_load_ok -> (s009_temp_limit_exceeded_uses_overtemp | s015_generate_alarm_data_for_overtemp))",
    "G(s005_overtemp_vals_load_ok -> X(s006_load_valid_temp_range_starts | s005_waiting_for_next_init_step))",
    "G(s005_overtemp_vals_load_ok -> G(s005_lower_overtemp_lo_calc_correct & s005_upper_overtemp_uo_calc_correct | s005_overtemp_calc_error))",
    "G(s005_overtemp_vals_load_ok -> F(s005_overtemp_can_be_set_per_thermo_type | s005_global_overtemp_applies))",
    "F(s005_overtemp_val_init_schema_ok | s005_overtemp_val_schema_mismatch)",
    "G(s005_overtemp_init_parse_err -> F(s005_log_init_err_overtemp & s005_system_uses_failsafe_overtemp_limit))",
    "G(!s005_overtemp_vals_avail_to_sys -> G(s009_overtemp_detection_unreliable | s015_overtemp_alarms_nonfunctional))",
    "G(s005_overtemp_vals_load_ok & s009_temp_exceeds_lo_or_uo -> F(s009_temp_limit_exceeded_event & s015_alarm_triggered))",
    "G(s005_overtemp_delta_value_too_strict -> F(s005_warning_frequent_overtemp_alarms))",
    "G(s005_overtemp_delta_value_too_lax -> F(s005_warning_potential_unsafe_temp_not_alarmed))",
    "G(s005_overtemp_values_set_based_on_equipment_tolerance | s005_overtemp_values_based_on_safety_std)",
    "G(s005_overtemp_vals_load_ok -> F(s017_change_thermo_setting_recalculates_lo_uo))",
    "G(s005_overtemp_vals_load_ok -> G(s005_lo_is_tset_minus_od & s005_uo_is_tset_plus_od))",
    "G(s005_overtemp_values_have_separate_heating_cooling_limits | s005_overtemp_symmetric_around_tset)",
    "G(s005_overtemp_vals_load_ok -> s005_admin_can_override_overtemp_with_auth | s005_overtemp_limits_are_fixed)",
    "G(s005_overtemp_value_units_consistent_with_temp_units)",
    "G(s005_overtemp_vals_load_ok -> F(s018_reports_can_track_overtemp_events_frequency))",
    "G(s005_overtemp_val_outside_safety_range -> F(s005_overtemp_val_override_requires_senior_approval))",
    "G(s005_read_init_for_overtemp U s005_overtemp_val_processing_done)",
    "G(s005_overtemp_val_processing_done -> (s005_overtemp_vals_load_ok | s005_overtemp_vals_load_failed))",
    "G(s005_overtemp_vals_load_failed -> F(s005_system_operates_without_overtemp_protection_warning | s005_critical_alarm_system_compromised))",
    "F(s005_overtemp_values_documented_and_justified)",
    "G(s005_overtemp_vals_load_ok -> G(s009_temp_within_lo_uo_range -> !F(s015_overtemp_alarm_active)))", # Liveness / Safety
    "G(s005_op_param_out_overtemp -> s005_overtemp_data_used_by_monitoring_logic)",
    "G(s005_overtemp_vals_load_ok -> (s005_overtemp_value_is_absolute_temp_limit | s005_overtemp_value_is_delta_from_setpoint))", # Clarifying based on TSET +/- OD
    "G(s005_overtemp_vals_load_ok -> F(s005_audit_log_for_overtemp_limit_changes))",
    "G(s005_overtemp_vals_load_ok -> s005_overtemp_value_matches_init_file_spec_fahrenheit)",
    "G(s005_overtemp_vals_load_ok -> (s014_generate_hc_signal_not_directly_stopped_by_overtemp_itself | s016_event_data_logs_overtemp_alarms))",
    "G(s005_init_data_in_overtemp & s002_thermo_def_load_ok -> F(s005_overtemp_vals_can_be_applied_per_thermostat))",
    "G(s005_overtemp_vals_load_ok -> (s005_all_thermostats_have_overtemp_logic | F(s005_missing_overtemp_config_for_some_thermostats_error)))",
    "G(s005_overtemp_delta_not_gt_zero -> F(s005_invalid_overtemp_delta_error_must_be_positive))",
    "G(s005_overtemp_config_allows_different_od_per_thermo_group | s005_overtemp_od_is_global)",

    # ... Total formulas will be sum for all 18 SRS items ...
    # Adding a few more implications between SRS items as requested
    "G(s001_def_load_ok & s002_thermo_def_load_ok & s003_util_params_load_ok & s004_trigger_vals_load_ok & s005_overtemp_vals_load_ok & s006_valid_range_load_ok -> F(s007_sys_init_can_start_fully_configured))",
    "G(s007_sys_init_all_hc_off -> X(s007_check_all_thermos_starts))",
    "G(s008_temp_valid_false -> F(s015_alarm_invalid_temp))",
    "G(s008_temp_valid_true & s009_temp_limit_exceeded_true -> F(s015_alarm_temp_limit))",
    "G(s009_temp_trigger_exceeded_true -> F(s010_determine_hc_mode_active))",
    "G(s010_hc_request_on & s011_unit_available_true -> F(s013_generate_hc_on_request))",
    "G(s010_hc_request_on & s011_unit_available_false -> F(s012_generate_unit_unavailable_event))",
    "G(s013_approved_hc_request_on -> F(s014_generate_hc_on_signal & s016_log_hc_on_event))",
    "G(s013_approved_hc_request_off -> F(s014_generate_hc_off_signal & s016_log_hc_off_event))",
    "G(s017_supervisor_changes_thermo_setting -> F(s008_validate_new_temp_setting & s009_re_eval_temp_status))",
    "G(s016_event_data_generated -> F(s018_reports_can_include_event))",
    "G(!s006_valid_temp_range_load_ok -> G(!s008_validate_temp_reliable))",
    "G(s011_hc_unit_lifo_queue_not_empty & s011_hc_unit_becomes_free -> F(s011_process_queued_request))",
    "G(s015_alarm_data_generated -> F(s016_alarm_event_logged))",
    "G(s018_report_request_operational_history -> F(s018_access_all_events_last_year))",
    "G(s018_report_request_stat_summary_month -> F(s018_access_events_for_selected_month & s018_calc_stats))",
    "G(s001_def_load_ok & !s002_thermo_def_load_ok -> F(s007_system_init_partial_warning))", # Inter-init step dependency
    "G(s005_overtemp_vals_load_ok & s008_temp_is_valid & s009_temp_exceeds_uo -> F(s015_alarm_uo_beep_pattern))", # Specific alarm pattern
    "G(s008_temp_is_invalid_from_thermo_x -> F(s015_alarm_invalid_temp_beep_pattern & s016_log_invalid_temp_thermo_x))",
    "G(s011_max_units_running & s010_another_hc_on_request -> F(s011_request_added_to_lifo_queue | s012_unit_unavailable_event_for_request))",
    "G(s014_hc_signal_sent_to_unit_y -> F(s014_unit_y_status_updated_at_thermostat_display & s016_log_unit_y_status_change))",
    "G(s007_initialize_system_issues_turn_off_all -> G( (F G !s014_hc_on_signal_active) | F(s007_init_failed_to_turn_off_all)))", # During init, units should stay off until explicitly turned on
    "G(s017_supervisor_selects_thermostat_for_setting_change -> F(s017_current_setting_displayed & s017_new_setting_validated_against_s006_range))",
    "G(s018_operational_history_report_selected -> F(s018_events_sorted_by_date_time & s018_ascii_report_file_created))",
    "G(s018_statistical_report_selected & s018_month_is_chosen -> F(s018_stats_calculated_for_month & s018_stat_report_file_created))",
    "G(s003_util_params_load_ok & s018_statistical_report_selected -> F(s018_report_includes_percentage_hc_unit_on_time & s018_report_includes_ratio_granted_denied_requests))"
]
